generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(255)
  posts posts[]
}

model comments {
  id           Int       @id @default(autoincrement())
  post_id      Int?
  user_id      String?   @db.Uuid
  comment_text String
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  posts        posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model likes {
  id       Int       @id @default(autoincrement())
  post_id  Int?
  user_id  String?   @db.Uuid
  liked_at DateTime? @default(now()) @db.Timestamp(6)
  posts    posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id])
}

model posts {
  id          Int         @id @default(autoincrement())
  image       String
  category_id Int?
  title       String      @db.VarChar(255)
  description String?
  date        DateTime?   @default(dbgenerated("CURRENT_DATE")) @db.Timestamp(6)
  content     String
  status_id   Int?
  likes_count Int?        @default(0)
  comments    comments[]
  likes       likes[]
  categories  categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  statuses    statuses?   @relation(fields: [status_id], references: [id], onUpdate: NoAction)
}

model statuses {
  id     Int     @id @default(autoincrement())
  status String  @unique @db.VarChar(10)
  posts  posts[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  password    String     @db.VarChar(255)
  username    String     @unique @db.VarChar(50)
  name        String     @db.VarChar(100)
  profile_pic String?
  role        String     @db.VarChar(10)
  comments    comments[]
  likes       likes[]
}
